{"ast":null,"code":"// Custom Persian number formatting functions\n// Convert English digits to Persian digits\nconst toPersianDigits=str=>{if(!str)return'';const persianDigits=['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];return str.toString().replace(/\\d/g,d=>persianDigits[d]);};// Convert Persian digits to English digits\nconst toEnglishDigits=str=>{if(!str)return'';const persianDigits=['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];return str.toString().replace(/[۰-۹]/g,d=>persianDigits.indexOf(d));};// Add commas for thousand separators\nexport const addCommas=number=>{const numStr=Math.floor(number).toString();return numStr.replace(/\\B(?=(\\d{3})+(?!\\d))/g,',');};// Remove commas from number\nexport const removeCommas=str=>{if(!str)return'';return str.toString().replace(/,/g,'');};// Format number with Persian commas (integer only)\nexport const formatPersianNumber=number=>{if(typeof number!=='number'||isNaN(number))return'۰';// Floor to integer\nconst integer=Math.floor(number);const withCommas=addCommas(integer);return toPersianDigits(withCommas);};// Remove commas from Persian number and convert to number\nexport const unformatPersianNumber=text=>{if(!text||text==='')return 0;try{const englishText=toEnglishDigits(text.toString());const cleaned=removeCommas(englishText);const number=parseInt(cleaned);return isNaN(number)?0:number;}catch(error){console.error('Error in unformatPersianNumber:',error);return 0;}};// Format input value for display (with Persian digits, integer only)\nexport const formatInputValue=value=>{if(!value||value==='')return'';try{const englishText=toEnglishDigits(value.toString());const cleaned=removeCommas(englishText);const number=parseInt(cleaned);if(isNaN(number))return value;return toPersianDigits(number.toString());}catch(error){console.error('Error in formatInputValue:',error);return value;}};// Convert number to Persian words\nexport const numberToWords=number=>{const integer=Math.floor(number);if(integer===0)return'صفر';const ones=['','یک','دو','سه','چهار','پنج','شش','هفت','هشت','نه'];const tens=['','ده','بیست','سی','چهل','پنجاه','شصت','هفتاد','هشتاد','نود'];const hundreds=['','صد','دویست','سیصد','چهارصد','پانصد','ششصد','هفتصد','هشتصد','نهصد'];const scales=['','هزار','میلیون','میلیارد','تریلیون'];const convertLessThanOneThousand=num=>{if(num===0)return'';if(num<10)return ones[num];if(num<20){if(num===11)return'یازده';if(num===12)return'دوازده';if(num===13)return'سیزده';if(num===14)return'چهارده';if(num===15)return'پانزده';if(num===16)return'شانزده';if(num===17)return'هفده';if(num===18)return'هجده';if(num===19)return'نوزده';}if(num<100){const ten=Math.floor(num/10);const one=num%10;return tens[ten]+(one>0?' و '+ones[one]:'');}if(num<1000){const hundred=Math.floor(num/100);const remainder=num%100;return hundreds[hundred]+(remainder>0?' و '+convertLessThanOneThousand(remainder):'');}};const convert=num=>{if(num===0)return'صفر';let result='';let scaleIndex=0;while(num>0){const chunk=num%1000;if(chunk!==0){const chunkWords=convertLessThanOneThousand(chunk);if(scaleIndex>0){result=chunkWords+' '+scales[scaleIndex]+(result?' و '+result:'');}else{result=chunkWords;}}num=Math.floor(num/1000);scaleIndex++;}return result;};return convert(integer);};// Convert number to Persian words\nexport const numberToPersianWords=number=>{return numberToWords(number);};// Format currency display (integer only)\nexport const formatCurrency=amount=>{return\"\".concat(formatPersianNumber(amount),\" \\u062A\\u0648\\u0645\\u0627\\u0646\");};// Format currency with words (integer only)\nexport const formatCurrencyWithWords=amount=>{return\"\".concat(formatPersianNumber(amount),\" \\u062A\\u0648\\u0645\\u0627\\u0646 (\").concat(numberToPersianWords(amount),\")\");};","map":{"version":3,"names":["toPersianDigits","str","persianDigits","toString","replace","d","toEnglishDigits","indexOf","addCommas","number","numStr","Math","floor","removeCommas","formatPersianNumber","isNaN","integer","withCommas","unformatPersianNumber","text","englishText","cleaned","parseInt","error","console","formatInputValue","value","numberToWords","ones","tens","hundreds","scales","convertLessThanOneThousand","num","ten","one","hundred","remainder","convert","result","scaleIndex","chunk","chunkWords","numberToPersianWords","formatCurrency","amount","concat","formatCurrencyWithWords"],"sources":["/home/runner/work/Dang-O-Dong/Dang-O-Dong/src/utils/persianUtils.js"],"sourcesContent":["// Custom Persian number formatting functions\n\n// Convert English digits to Persian digits\nconst toPersianDigits = (str) => {\n  if (!str) return '';\n  const persianDigits = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\n  return str.toString().replace(/\\d/g, (d) => persianDigits[d]);\n};\n\n// Convert Persian digits to English digits\nconst toEnglishDigits = (str) => {\n  if (!str) return '';\n  const persianDigits = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\n  return str.toString().replace(/[۰-۹]/g, (d) => persianDigits.indexOf(d));\n};\n\n// Add commas for thousand separators\nexport const addCommas = (number) => {\n  const numStr = Math.floor(number).toString();\n  return numStr.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\n// Remove commas from number\nexport const removeCommas = (str) => {\n  if (!str) return '';\n  return str.toString().replace(/,/g, '');\n};\n\n// Format number with Persian commas (integer only)\nexport const formatPersianNumber = (number) => {\n  if (typeof number !== 'number' || isNaN(number)) return '۰';\n  // Floor to integer\n  const integer = Math.floor(number);\n  const withCommas = addCommas(integer);\n  return toPersianDigits(withCommas);\n};\n\n// Remove commas from Persian number and convert to number\nexport const unformatPersianNumber = (text) => {\n  if (!text || text === '') return 0;\n  try {\n    const englishText = toEnglishDigits(text.toString());\n    const cleaned = removeCommas(englishText);\n    const number = parseInt(cleaned);\n    return isNaN(number) ? 0 : number;\n  } catch (error) {\n    console.error('Error in unformatPersianNumber:', error);\n    return 0;\n  }\n};\n\n// Format input value for display (with Persian digits, integer only)\nexport const formatInputValue = (value) => {\n  if (!value || value === '') return '';\n\n  try {\n    const englishText = toEnglishDigits(value.toString());\n    const cleaned = removeCommas(englishText);\n    const number = parseInt(cleaned);\n    if (isNaN(number)) return value;\n    return toPersianDigits(number.toString());\n  } catch (error) {\n    console.error('Error in formatInputValue:', error);\n    return value;\n  }\n};\n\n// Convert number to Persian words\nexport const numberToWords = (number) => {\n  const integer = Math.floor(number);\n  if (integer === 0) return 'صفر';\n\n  const ones = ['', 'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه'];\n  const tens = ['', 'ده', 'بیست', 'سی', 'چهل', 'پنجاه', 'شصت', 'هفتاد', 'هشتاد', 'نود'];\n  const hundreds = ['', 'صد', 'دویست', 'سیصد', 'چهارصد', 'پانصد', 'ششصد', 'هفتصد', 'هشتصد', 'نهصد'];\n  const scales = ['', 'هزار', 'میلیون', 'میلیارد', 'تریلیون'];\n\n  const convertLessThanOneThousand = (num) => {\n    if (num === 0) return '';\n\n    if (num < 10) return ones[num];\n    if (num < 20) {\n      if (num === 11) return 'یازده';\n      if (num === 12) return 'دوازده';\n      if (num === 13) return 'سیزده';\n      if (num === 14) return 'چهارده';\n      if (num === 15) return 'پانزده';\n      if (num === 16) return 'شانزده';\n      if (num === 17) return 'هفده';\n      if (num === 18) return 'هجده';\n      if (num === 19) return 'نوزده';\n    }\n    if (num < 100) {\n      const ten = Math.floor(num / 10);\n      const one = num % 10;\n      return tens[ten] + (one > 0 ? ' و ' + ones[one] : '');\n    }\n    if (num < 1000) {\n      const hundred = Math.floor(num / 100);\n      const remainder = num % 100;\n      return hundreds[hundred] + (remainder > 0 ? ' و ' + convertLessThanOneThousand(remainder) : '');\n    }\n  };\n\n  const convert = (num) => {\n    if (num === 0) return 'صفر';\n\n    let result = '';\n    let scaleIndex = 0;\n\n    while (num > 0) {\n      const chunk = num % 1000;\n      if (chunk !== 0) {\n        const chunkWords = convertLessThanOneThousand(chunk);\n        if (scaleIndex > 0) {\n          result = chunkWords + ' ' + scales[scaleIndex] + (result ? ' و ' + result : '');\n        } else {\n          result = chunkWords;\n        }\n      }\n      num = Math.floor(num / 1000);\n      scaleIndex++;\n    }\n\n    return result;\n  };\n\n  return convert(integer);\n};\n\n// Convert number to Persian words\nexport const numberToPersianWords = (number) => {\n  return numberToWords(number);\n};\n\n// Format currency display (integer only)\nexport const formatCurrency = (amount) => {\n  return `${formatPersianNumber(amount)} تومان`;\n};\n\n// Format currency with words (integer only)\nexport const formatCurrencyWithWords = (amount) => {\n  return `${formatPersianNumber(amount)} تومان (${numberToPersianWords(amount)})`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}