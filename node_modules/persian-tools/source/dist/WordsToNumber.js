'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ = require('../');

var _digits = require('./digits');

var _replaceArray = require('../util/replaceArray');

var _replaceArray2 = _interopRequireDefault(_replaceArray);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// <Refrence path='https://fa.wikipedia.org/wiki/الگو:عدد_به_حروف/توضیحات' />
// https://fa.wikipedia.org/wiki/۱۰۰۰۰۰۰۰۰۰_(عدد)

var WordsToNumber = function () {
    function WordsToNumber(words) {
        _classCallCheck(this, WordsToNumber);

        this.units = {
            صفر: 0,
            یک: 1,
            دو: 2,
            سه: 3,
            چهار: 4,
            پنج: 5,
            شش: 6,
            شیش: 6,
            هفت: 7,
            هشت: 8,
            نه: 9,
            ده: 10,
            یازده: 11,
            دوازده: 12,
            سیزده: 13,
            چهارده: 14,
            پانزده: 15,
            شانزده: 16,
            هفده: 17,
            هجده: 18,
            نوزده: 19,
            بیست: 20,
            سی: 30,
            چهل: 40,
            پنجاه: 50,
            شصت: 60,
            هفتاد: 70,
            هشتاد: 80,
            نود: 90
        };

        this.adjective = {
            صد: 100,
            دویست: 200,
            سیصد: 300,
            چهارصد: 400,
            پانصد: 500,
            ششصد: 600,
            هفتصد: 700,
            هشتصد: 800,
            نهصد: 900
        };

        this.magnitudes = {
            هزار: 1000,
            میلیون: 1000000,
            بیلیون: 1000000000,
            میلیارد: 1000000000,
            تریلیون: 1000000000000
        };

        this.otherAdjective = {
            'شیش صد': 'ششصد',
            'شش صد': 'ششصد',
            'هفت صد': 'هفتصد',
            'هشت صد': 'هشتصد',
            'نه صد': 'نهصد'
        };
    }
    /**
     * Convert to numbers
     * @method convert
     * @param  {String} words         [String of words - like this: سی صد پنجاه هزار]
     * @param  {String} [digits='en'] [convert number digits to en or fa]
     * @return {Number}               [Result - like this: 350000]
     */


    _createClass(WordsToNumber, [{
        key: 'convert',
        value: function convert(words) {
            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$digits = _ref.digits,
                digits = _ref$digits === undefined ? 'en' : _ref$digits,
                _ref$addCommas = _ref.addCommas,
                addCommas = _ref$addCommas === undefined ? false : _ref$addCommas;

            var numbersConverted = this.compute(this.tokenize(words));

            numbersConverted = addCommas ? (0, _.addCommas)(numbersConverted) : numbersConverted;
            numbersConverted = digits === 'fa' ? (0, _digits.digitsEnToFa)(numbersConverted) : numbersConverted;

            return numbersConverted;
        }
    }, {
        key: 'tokenize',
        value: function tokenize(allWords) {
            var words = (0, _replaceArray2.default)(allWords, this.otherAdjective);
            words = words.replace(new RegExp('(مین|م)$', 'ig'), '');

            var result = [];

            words.split(' ').forEach(function (word) {
                return word === 'و' ? '' : !isNaN(+word) ? result.push(+word) : result.push(word);
            });

            return result;
        }
    }, {
        key: 'compute',
        value: function compute(tokens) {
            var _this = this;

            var sum = 0;
            var isNegative = false;

            tokens.forEach(function (token) {
                token = (0, _digits.digitsFaToEn)(token);

                if (token === 'منفی') {
                    isNegative = true;
                } else if (_this.units[token] != null) {
                    sum += _this.units[token];
                } else if (_this.adjective[token] != null) {
                    sum += _this.adjective[token];
                } else if (!isNaN(token)) {
                    sum += parseInt(token, 10);
                } else {
                    sum *= _this.magnitudes[token];
                }
            });
            return isNegative ? sum * -1 : sum;
        }
    }]);

    return WordsToNumber;
}();

exports.default = WordsToNumber;